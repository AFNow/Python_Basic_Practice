# range - условный генератор, который позволяет создать список или последовательность из указанных в нем параметров
# Он полностью генерирует информацию, не сохраняя ее в памяти
# (start, stop, step) - где start - первое число, stop - последнее число, step - шаг исчисления
# range(0,5,2)

# Enumerate - функция нумеравания последовательности в каком-либо виде, запаковывающая данные в кортеж
word  = 'abobus'
for item in enumerate(word): # Формирования нумерации, для каждого отдельного символа в указанном слове
    print(item)

# Zip - функция генерации кортежей из списков, позволяет совместить данные нескольких списков в кортежи, в последовательности соответствия индексов
lst1 = ['1','2','3','4','5']
lst2 = ['a','b','c','d','e']
lst3 = ['100','200','300']
for item in zip(lst1,lst2,lst3):
    print (item) # При генерации размер формируемых кортежей зависит от самого меньшего по размеру списка.
# Также это позволяет распаковывать сформированные кортежи:
for a,b,c in zip(lst1,lst2,lst3):
    print (a,b,c)
# in - оператор для проверки элемента в списке или ином итерируемом контейнере, в ответ выдающий булевое значение true или false
# Может быть применен как в str для подтверждения элемента, так и в таблицах или словарях. Для словарей требуется указать тип данных: keys или values ()
    # dict = {'key':1}
    # 1 in dict.keys() / 'key' in dict.values()
# min / max - операторы, запрашивающие минимальное или максимальное значения из списка или кортежа
        # min (lst1) --> 1
        # max (lst3) --> 300
# random - встроенная библиотека, которая позволяет импортировать случаные числа из самой библиотеки random
from random import randint # Импорт из библиотеки происходит на указанную переменную 
randint(0,999) 
random_integer = randint(0,1000) # Эту указанную переменную можно в последствии назначить на конкретную переменную в нужном диапазоне
print (random_integer)



