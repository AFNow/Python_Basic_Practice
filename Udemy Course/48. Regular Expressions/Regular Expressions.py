# Regular expressions - регулярные выражения (шаблонные выражения) - специальная командная последовательность, которая задает параметры поиска подстрок данных в тексте, 
# является регистрозависимой и пишется в виде синтаксиса:
import re 
    # re.search(pattern, string)	            Найти в строке string первую строчку, подходящую под шаблон pattern;
    # re.fullmatch(pattern, string)	            Проверить, подходит ли строка string под шаблон pattern;
    # re.split(pattern, string, maxsplit=0)	    Аналог str.split(), только разделение происходит по подстрокам, подходящим под шаблон pattern;
    # re.findall(pattern, string)	            Найти в строке string все непересекающиеся шаблоны pattern;
    # re.finditer(pattern, string)	            Итератор по всем непересекающимся шаблонам pattern в строке string (выдаются match-объекты);
    # re.sub(pattern, repl, string, count=0)    Заменить в строке string все непересекающиеся шаблоны pattern на repl;

# Шаблоны
# .	            Один любой символ, кроме новой строки \n
# \d	        Любая цифра
# \D	        Любой символ, кроме цифры
# \s	        Любой пробельный символ (пробел, табуляция, конец строки и т.п.)
# \S	        Любой непробельный символ	
# \w	        Любая буква (то, что может быть частью слова), а также цифры и _
# \W	        Любая не-буква, не-цифра и не подчёркивание	
# [..]          Один из символов в скобках, а также любой символ из диапазона a-b
# [^..]	        Любой символ, кроме перечисленных	<[^>]>	<1>, <a>, <>>
# [abc-], [-1]	если нужен минус, его нужно указать последним или первым			

# \b	Начало или конец слова (слева пусто или не-буква, справа буква и наоборот).
#       В отличие от предыдущих соответствует позиции, а не символу

# \B	Не граница слова: либо и слева, и справа буквы, либо и слева, и справа НЕ буквы

# \d≈[0-9],
# \D≈[^0-9],
# \w≈[0-9a-zA-Z
# а-яА-ЯёЁ],
# \s≈[ \f\n\r\t\v]	Буква “ё” не включается в общий диапазон букв!

# Квантификаторы
# {n}	Ровно n повторений	\d{4}	1, 12, 123, 1234, 12345
# {m,n}	От m до n повторений включительно	\d{2,4}	1, 12, 123, 1234, 12345
# {m,}	Не менее m повторений	\d{3,}	1, 12, 123, 1234, 12345
# {,n}	Не более n повторений	\d{,2}	1, 12, 123
# ?	Ноль или одно вхождение, синоним {0,1}	валы?	вал, валы, валов
# *	Ноль или более, синоним {0,}	СУ\d*	СУ, СУ1, СУ12, ...
# +	Одно или более, синоним {1,}	a\)+	a), a)), a))), ba)])

# *?        По умолчанию квантификаторы жадные —
# +?        захватывают максимально возможное число символов.
# ??        Добавление ? делает их ленивыми,
# {m,n}?    они захватывают минимально возможное число символов
# {,n}?
# {m,}?

# Additional flags 

# Константа	        Её смысл
# re.ASCII	        По умолчанию \w, \W, \b, \B, \d, \D, \s, \S соответствуют
#                     все юникодные символы с соответствующим качеством.
#                     Например, \d соответствуют не только арабские цифры,
#                     но и вот такие: ٠١٢٣٤٥٦٧٨٩.
#                     re.ASCII ускоряет работу,
#                     если все соответствия лежат внутри ASCII.

# re.IGNORECASE	    Не различать заглавные и маленькие буквы.
#                     Работает медленнее, но иногда удобно

# re.MULTILINE	    Специальные символы ^ и $ соответствуют
#                     началу и концу каждой строки

# re.DOTALL	        По умолчанию символ \n конца строки не подходит под точку.
#                     С этим флагом точка — вообще любой символ




# https://habr.com/ru/articles/349860/#Primery_regulyarnyh_vyrazheniy