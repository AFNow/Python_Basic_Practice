# Числа
def intPi (n):# Вычислить число PI с точностью до N цифр** - Введите число, и программа вычисляет число &pi; (пи) с заданной точностью. Установите ограничение, чтобы не вводить слишком большое значение параметра N.
    import math
    pi = math.pi
    result= str(pi)
    print (result[:n])
intPi(10)

def prime_factors(n):# Разложение на простые делители** - Пользователь вводит число, программа находит все простые делители этого числа (если такие есть), и отображает их.
    result = []
    cycle = 2
    while cycle <= n:
        if n % cycle == 0:
            result.append(cycle)
            n = n / cycle
        else:
            cycle += 1
    print (result)
prime_factors(30)

def compnum():# Следующее простое число** - Программа продолжает находить простые числа до тех пор, пока пользователь не прекратит просить программу показать следующее простое число.   
# Простое число — натуральное число, имеющее ровно два различных натуральных делителя. Другими словами, натуральное число является простым, 
# если оно отлично от 1 и делится без остатка только на 1 и на само себя
    pass
compnum()

# Калькулятор ипотеки** - Вычислите ежемесячные платежи для ипотечного кредита с фиксированной суммой, сроком кредита, заданной процентой ставкой и количеством платежей, равным N. Также посчитайте, сколько всего в итоге заплатит пользователь. Также можете опционально реализовать продвинутый вариант - возможность делать частичное досрочное погашение, либо с уменьшением срока кредита (сохраняя ежемесячный платеж), либо с уменьшением ежемесячного платежа (сохраняя срок кредита).

# Возврат сдачи** - Пользователь вводит цену товара, и сколько денег дал кассиру покупатель. Программа рассчитывает, сколько каких купюр и монет следует отдать в виде сдачи.

# Перевод бинарных чисел в десятичные и обратно** - Напишите программу, которая переводит десятичное число в бинарное, или бинарное число в десятичное.

# Калькулятор** - Простой калькулятор для выполнения простых действий. Для более сложного задания, можете реализовать научный калькулятор.

# Перевод единиц измерения (температура, валюта, объем, масса и т.д.)** - Конвертировать различные единицы измерения между собой. Пользователь вводит тип исходной единицы измерения, в какую единицу измерения нужно перевести, и само значение. Затем программа выполняет конвертацию.

# Будильник** - Простые часы, которые издают звук после X минут/секунд, или через определенный интервал времени.

# Расстояние между двумя городами** - Вычисляет расстояние между двумя городами, и позволяет пользователю указать единицу измерения для расстояния. Программа может потребовать поиск координат (широта, долгота) для городов.

# Проверка кредитных карт** - Программа берёт номер карты популярного эмитента карт (Visa, MasterCard, American Express, Discoverer), и проверяет, что номер является валидным номером (посмотрите, каким образом кредитные карты используют контрольные суммы).

# Калькулятор налогов** - Программа просит пользователя ввести цену, и ставку налога. Затем возвращает сумму налога, и общую сумму - цена плюс налог.

# Поиск факториала** - Факториал положительного числа, n, определяется как произведение чисел n, n-1, n-2, ...1. Факториал нуля равен единице . Решите эту задачу, используя как циклы, так и рекурсию.

# Алгебра комплексных чисел** - Реализуйте в различных функциях сложение, умножение, отрицание и инверсию для комплексных чисел. (Вычитание и деление можно не делать, поскольку они могут быть реализованы с помощью пары имеющихся операций.) Напечатайте результаты для каждой проверяемой операции.

# Счастливые числа (happy numbers, не путать в lucky numbers)** - Счастливое число определяется следующим образом. Начинаем с любого положительного числа. Берём это число, и заменяем его суммой квадратов всех его цифр. Повторяем процесс до тех пор, пока число не станет равным 1. Например, число 19 является счастливым:
# Если процесс бесконечно продолжается и не заканчивается на 1, то такое число не считается счастливым. Найдите первые 8 счастливых чисел.

# Написание числа словами** - Напишите число словами. Например: 123 это "сто двадцать три". Можете использовать уже существующую реализацию, или создать свою собственную, но реализуйте поддержку чисел хотя бы до миллиона. *Опционально: реализуйте поддержку чисел, отличающихся от положительных целых чисел (например нуль, отрицательные целые числа, числа с плавающей точкой).*

def flip_a_coin(n):# *Эмуляция подбрасывания монеты** - Напишите программу, которая эмулирует подбрасывание одной монеты столько раз, сколько решит пользователь. Подсчитайте, сколько раз выпали орёл и решка.
    import random
    count = 0
    heads = 0
    tails = 0
    while count < n:
        flip = random.randint(1,2)
        count += 1
        if flip % 2 == 0:
            heads += 1
        else:
            tails += 1
    print (f"Выпало {heads} орлов и {tails} решек")
flip_a_coin(10000)

# Быстрое возведение в степень** - Пользователь вводит 2 целых числа, и программа вычисляет a^b (a в степени b, со сложностью по времени O(lg n).