# Классические алгоритмы
# Гипотеза Коллатца (гипотеза 3n+1, сиракузская проблема)** - Начните с числа *n > 1*. Найдите количество шагов, необходимое для того, чтобы получить единицу, используя следующий процесс: если *n* чётное, разделите его на 2. Если *n* нечётное, умножьте его на 3 и добавьте 1.

# Сортировка** - Реализуйте два типа алгоритма сортировки: сортировка слиянием и сортировка пузырьком.

# Задача о паре ближайших точек** - это задача вычислительной геометрии: имея *n* точек в метрическом пространстве, найдите пару точек с наименьшим расстоянием между ними.

# *Решето Эратосфена** -  один из наиболее эффективных способов найти все простые числа меньше заданного числа.

# Графы
# Графы из ребер** - Напишите программу, которая создаёт граф или сеть из набора рёбер.

# Эйлеров путь в графе** - Напишите программу, которая получает на входе граф, и на выходе выводит либо Эйлеров путь, либо Эйлеров цикл, или говорит что это невозможно. Эйлеров путь начинается с одной вершины, проходит по всем рёбрам через каждую вершину, и завершается в другой вершине. Эйлеров цикл это Эйлеров путь, который начинается и заканчивается в одной и той же вершине.

# Связанный граф** - Напишите программу, которая получает на входе граф, и на выходе говорит, связаны ли все вершины между собой или нет.

# Алгоритм Дейкстры** - Напишите программу, которая находит кратчайший путь по графу, используя его рёбра.

# *Минимальное остовное дерево** - Напишите программу, которая получает на входе связанный ненаправленный граф с весами рёбер, и выводит минимальное остовное дерево, то есть подграф, который является деревом, содержит все его вершины, и сумма всех весов его рёбер наименьшая. 

# Структуры данных
# Инвертированный индекс** - структура данных, используемая для создание полнотекстового поиска. На входе есть набор текстовых файлов, напишите программу, которая создает инвертированный индекс (см. https://ru.wikipedia.org/wiki/Инвертированный_индекс). Также создайте пользовательский интерфейс, чтобы выполнять поиск по инвертированному индексу. Для указанного термина поиск возвращает список файлов, содержащих этот термин. Индекс поиска может быть в памяти.

# Текст
# Подсчёт гласных** - Введите строку, и программа должна подсчитать количество гласных букв в этом тексте. Также можно указать количество для каждой гласной буквы отдельно.

# Подсчёт количества слов в строке** - Подсчитать количество отдельных слов в строке. Для увеличенной сложности, прочитайте строки из текстового файла.

# Текстовый редактор** - Приложение, похожее на Блокнот, которое может открывать, редактировать и сохранять текстовые файлы. *Опционально: добавьте подсветку синтаксиса и другие возможности.*

# Создание RSS Feed** - На входе ссылка на RSS/Atom Feed, получите все записи и отобразите их.

# Отображение котировок (для кодов ценных бумаг на бирже)** - Напишите программу, которая может получить текущие значения котировок для акций (ценных бумаг) для того списка кодов ценных бумаг (тикеров), который ввёл пользователь. Пользователь может указать, как часто нужно проверять акции. При обновлении данных покажите для каждой акции, котировка изменилась вверх или вниз. *Опционально: Для графического интерфейса, можете добавить зеленую стрелку вверх или красную стрелку вниз для отображения того, в каком направлении изменилась котировка акции.*

# Гостевой журнал** - Простое приложение, которое позволяет людям добавлять записи в журнале. Можно добавить дату-время создания для каждой записи, а также возможность комментировать записи. *Опционально: опубликуйте приложение на Google App Engine или Heroku или другой платформе PaaS (если возможно, конечно).*

# Шифр Виженера / Вернама / Цезаря** - Функции для зашифровывания и расшифровывания сообщений.

# Инструмент обработки регулярных выражений** - позволяет пользователю ввести текстовую строку, и отдельно шаблон регулярного выражения. Далее программа применяет шаблон регулярного выражения к текстовой строке, и возвращает совпадения (если есть), или указывает на ошибки в регулярном выражении.


# Сеть
# Программа FTP** - Программа передачи файлов, которая может закачивать и скачивать файлы с удалённого веб-сервера.

# Монитор пропускной способности** - Небольшая служебная программа, которая отслеживает объём данных, переданных и принятых по сети во время Вашей текущей онлайн-сессии. Выясните, в какое время дня Вы используете больше или меньше данных. Сгенерируйте отчёт или график, чтобы показать это.

# Сканирование портов** - Введите IP-адрес и диапазон портов, и программа попытается найти открытые порта этого компьютера, подключаясь к каждому из портов. При успешном подключении указать, что порт открыт.

# Проверка почты (POP3 / IMAP)** - Пользователь вводит учётные данные почтовой записи, веб-сервер / IP-адрес, протокол (POP3 или IMAP), и приложение проверяет почту через заданный интервал времени.

# Определение страны по IP-адресу** - Введите IP-адрес и найдите страну, в которой зарегистрирован этот IP-адрес. *Опционально: определите текущий IP-адрес автоматически.*

# Утилита Whois** - Введите IP-адрес или название хоста, найдите его с помощью whois, и выведите результат.

# Проверка сайта по времени** - Приложение пытается подключиться к веб-сайту или серверу периодически, например каждые 5 минут или указанное количество минут, и проверяет доступность сайта/сервера. Если он недоступен, то программа извещает Вас об этом по электронной почте, или выводит сообщение на экран.


# Работа с классами
# Инвентаризация продукции** - Напишите приложение, которое управляет инвентаризацией продукции. Создайте класс *product* с ценой, идентификатором, и количеством имеющихся единиц продукта. Далее создайте класс *inventory*, который отслеживает различные продукты и может просуммировать инвентарную стоимость.

# Система бронирования авиакомпании / отеля** - Создайте систему бронирования, которая резервирует места в самолёте или номера в отеле. Создайте различную цену для различных категорий мест или номеров. Например, бизнес-класс стоит дороже, чем эконом-класс. Номера в отеле могут быть пентхаусами и стоить дороже. Отслеживайте, когда те или иные комнаты будут доступны для бронирования.

# Управление компанией** - Создайте иерархию классов - абстрактный класс Employee и подклассы HourlyEmployee, SalariedEmployee, Manager и Executive. Компенсация каждого подкласса вычисляется по-разному, поищите информацию в интернете, чтобы выяснить детали.
# После того, как Вы создали иерархию сотрудников, создайте класс Company, который позволяет Вам управлять сотрудниками. Вы должны уметь нанимать, увольнять и повышать сотрудников. 

# Управление банковским счётом** - Создайте класс Account, который будет абстрактным классом для трёх других классов CheckingAccount, SavingsAccount и BusinessAccount. Управляйте дебетом и кредитом этих счетов по аналогии с банкоматом.

# Расписание пациент / доктор** - Создайте класс patient и класс doctor. Доктор может принимать нескольких пациентов. Напишите программу, которая ведёт расписание приема доктора. В один рабочий день, за 8 часов, доктор может принять только 16 пациентов.

# Создание и управление рецептами** - Создайте класс recipe с ингредиентами рецепта, и поместите их в программу управления рецептами, которая разделяет их на такие категории как десерты, основные блюда и т.д., или разбивает их по ингредиентам - рыбные блюда, мясные блюда, супы, выпечка и т.д.

# Галерея изображений** - Создайте абстрактный класс image и затем подклассы для каждого типа изображения. Поместите их в программу, которая выводит изображения в виде галереи для просмотра.

# Классы Область Фигуры и Периметр** - Создайте абстрактный класс Shape и далее подклассы для таких фигур, как ромб, прямоугольник, круг, треугольник и т.д. В каждом подклассе переопределите Область Фигуры и Периметр для каждого типа фигуры.

# Магазин цветов** - Создайте приложение для магазина цветов, который работает с объектами flower и использует их для создания объекта bouquet, который затем можно продать. Отслеживайте количество объектов, и когда нужно заказывать дополнительные цветы.

# Создание фамильного дерева** - Создайте класс Person с именем, датой рождения и (если его/её уже нет с нами) датой ухода из жизни. Позвольте пользователю создавать классы Person и поместить их в структуру фамильного дерева. Выведите дерево на экран.


# Многопоточность
# Создайте прогресс-бар для скачивания файлов** - чтобы отслеживать процессы скачивания файлов, которые выполняются в данный момент. Прогресс-бар будет находиться в отдельном потоке, и будет общаться с основным потоком с помощью delegates.

# Создание уменьшенных изображений** - Обработка изображений может занимать некоторое время. Особенно если изображения большие. Напишите программу, которая берёт сотни изображений и создает их уменьшенные копии в фоновом режиме, а Вы в это время можете делать другие вещи. Для увеличенной сложности, сделайте один поток для уменьшения размера, а другой поток для массового переменования файлов и т.д. 


# Web
# Обработка страницы** - Напишите программу, которая подключается к веб-сайту и извлекает все ссылки, или изображения, и сохраняет их в виде списка. *Опционально: отсортируйте содержимое и исключите дубликаты. Поместите результаты в индексированный файл, в котором легко выполнять поиск.*

# Маркерная доска онлайн** - Напишите программу, которая позволяет рисовать картинки, добавлять надписи и использовать различные цвета. *Опционально: добавьте возможность приглашать друзей и совместно работать онлайн на одной и той же маркерной доске.*

# Получить атомное время из интернета** - Напишите программу, которая получает правильное атомное время из любого ресурса атомных часов в интернете - найдите такой ресурс с помощью простого поиска в Google.

# Получить текущую погоду** - получите текущую погоду для указанного почтового индекса. *Опционально: попробуйте автоматически определить местоположение пользователя.*

# Автоматический вход на сайт и выполнение действия** - Напишите программу, которая по расписанию выполняет вход на сайт, выполняет определённое действие, и выходит с сайта. Это может быть полезно например для проверки веб-почты, регулярной публикации контента, или получения информации и её сохранения на своем компьютере. 

# Генератор электронных открыток** - Создайте сайт, который позволяет людям создавать свои собственные маленькие электронные открытки, и отправлять их другим людям. Не используйте Flash. Используйте библиотеку картинок, и возможно надписи или цитаты.

# *Система управления контентом (Content Management System)** - такая как Joomla, Drupal, PHP Nuke и т.д. Сделайте базовые элементы системы. *Опционально: реализуйте добавление модулей/плагинов.*

# Веб-форум** - Создайте форум для себя и свои друзей, чтобы публиковать и делиться мыслями и идеями.

# Создание CAPTCHA** - Вы когда-либо видели изображения с буквами и цифрами - когда Вы подключаетесь к системе, Вас спрашивают, что Вы видите на картинке? Это позволяет защититься от ботов, которые автоматически регистрируются и публикуют спам. Создайте такой генератор картинок самостоятельно.


# Файлы
# Создание викторин** - Напишите приложение, которое берёт набор вопросов из файла, выбирает из них несколько штук случайным образом, и предлагает студентам в виде викторины. Каждый набор вопросов может быть уникальным, и затем подсчитайте количество правильных ответов, которые ввел пользователь.

# Утилита сортировки файла Excel/CSV** - читает строки из файла, сортирует их, и затем записывает обратно в файл. Пользователь может выбрать вид сортировки (по возрастанию, по убыванию) и поле, по которому следует выполнять сортировку.

# Создание Zip-архива** - Пользователь указывает несколько файлов из различных папок, и программа добавляет их в архив zip. *Опционально: реализуйте компрессию файлов; начните с алгоритма Хаффмана.*

# Генератор PDF** - Приложение читает текстовый файл или файл html, и создает на его основе файл PDF. Отлично подходит для веб-сервиса, где пользователь загружает файл и программа возвращает PDF-файл. *Опционально: разместите программу на GAE или Heroku, если это возможно.*

# Теги Mp3** - Добавляйте и редактируйте теги ID3v1 для файлов MP3. Посмотрите, можете ли Вы добавить в заголовок файла MP3 обложку альбома и другие теги ID3v2.

# Менеджер фрагментов кода** - Ещё одна служебная программа, которая позволяет программистам сохранять функции, классы и другие куски функционала для последующего использования. Разбейте фрагменты кода по типу кода или по языку программирования. *Опционально: добавьте подсветку синтаксиса, в зависимости от языка программирования.*

# Базы данных
# Анализатор запросов SQL** - Приложение, в котором пользователь может ввести запрос, выполнить его в локальной базе данных, и рекомендовать как сделать его более эффективным.

# Запуск SQL на удаленных серверах** - Приложение, которое запускает запросы на удаленных серверах с Вашего компьютера через интернет. На входе указывается сервер, имя пользователя и пароль. Программа запускает запрос и возвращает результаты.

# Генератор отчётов** - Напишите программу, которая создает отчёт на основе нескольких таблиц в базе данных. Например, отчёт о продажах на основе таблиц order/order details, суммируя данные по дням.

# Расписание событий и календарь** - Напишите программу, в которой пользователь вводит дату и время события, описание события и затем помещает такие события в календарь. Затем пользователь может просматривать календарь, или искать в нём определенные события. *Опционально: позвольте создавать повторяющиеся события, которые происходят каждый день, каждую неделю, месяц, год и т.д.*

# Бюджет** - Напишите программу, которая ведёт бюджет домохозяйства. Пользователь может добавлять расходы, доходы, и повторяющиеся расходы. И узнать, сколько он накопил или потерял за период времени. *Опционально: позвольте пользователю указать диапазон дат, и покажите сумму входящих и исходящих денег, которые поступили на счет и которые были потрачены за этот период времени.*

# Телепрограмма** - У Вас есть любимое ТВ-шоу, которое Вы не хотите пропустить? У Вас нет возможности записать его и посмотреть позже? Создайте приложение, которое выполнит поиск по различным сайтам с программами телепередач, найдет различные каналы/время/передачи и добавит их в базу данных. И затем база данных / веб-сайт будет отправлять Вам по почте напоминания, что Ваше любимое шоу вот-вот начнется, и подскажет на каком канале.

# Планирование путешествия** - Напишите программу, которая позволяет пользователю составить свой план путешествия, отслеживая в нём бронирования авиабилетов и отелей, достопримечательности, бюджет и расписание.


# Графика и мультимедиа
# Слайд шоу** - Напишите программу, которая показывает различные картинки в режиме слайд-шоу. *Опционально: добавьте различные визуальные эффекты, такие как плавное появление и исчезновение, перелистывание и другие виды перехода между слайдами.*

# Воспроизведение видео онлайн** - Попытайтесь создать свой собственный потоковый видео-плеер.

# Mp3-плеер** - Простая программа для воспроизведения Ваших любимых музыкальных файлов. Добавьте функции, которых на Ваш взгляд Вам не хватает в Вашем любимом музыкальном плеере.

# Водяные знаки** - У Вас есть некоторые картинки, защищенные авторским правом? Добавьте Ваш собственный логотип или светлый текст на фоне, чтобы никто не мог просто так украсть изображения с Вашего сайта. Напишите программу, которая добавляет водяные знаки в изображение. *Опционально: используйте многопоточность для обработки нескольких изображений одновременно.*

# Черепашья графика** - Создайте поле 20 на 20 клеток. Используйте различные команды, чтобы черепашка рисовала линии на поле - движение вперед, поворот влево или вправо, опустить карандаш, поднять карандаш и т.д.  Пишите в интернете термин "Черепашья графика" для дополнительной информации. *Опционально: добавьте возможность считывать набор команд из файла.*

# Создание GIF** Программа берет несколько изображений (PNG, JPG, TIFF) и создает плавный GIF, который затем можно экспортировать. *Опционально: сделайте программу, которая конвертирует маленькие видео-файлы в GIF.*