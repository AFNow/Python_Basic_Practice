# Python имеет иерахическую систему поиска переменных и их данных, под названием LEGB:
# L - local - названия переменных, созданные внутри функции, которая их использует (def/lambda), но не объявленные как Global внутри этой функции
# E - Enclosing function locals - локальные переменные функций, находящиеся в ближнем уровне функции.
# G - Global - названия, присвоенные на верхнем уровне в файле модуля, или объявленные как глобальные внутри функции def
# B - Build-in - встроенные названия, open, range(),SyntaxError 
# Пример данных правил:
x = 'Глобальное значение' # - значение, которое будет вызываться в последнюю очередь в функции под ним.
def printerLayer1(): # Функция вызывает находящуюся внутри нее функцию, которая в последствии должна распечатать ближайшее доступное значение x
    #x = 'Ближайшее локальное значение' - локальное значение, которе является вторым по очереди при вызове функции print()
    def printerLayer2():
        #x = 'Локальное значение' - Локальное значение, которое стоит рядом с вызывающей его функцией
        print (x)
    printerLayer2()
printerLayer1()
# Аналогичный пример с числами:
y = 1 # - указание глобального значения переменной
def func(y): # - функция, которая должна распечатать переменную y
    print('У равен:', y)
    y = 10
    print('У равен:', y)
func(y)# - по сути, результат означает, что также имеет значение не только наличие локальной переменной, но и последовательность ее вызова. 
# Если она была создана позже первой попытки печати,то вызовется стоящая по иерархии дальше

# Команда Global - предназначена для назначения переменной на глобальном уровне после исполнения функции, в которой она указана как Global
x = 'Глобальное значение' # - Основное глобальное значение, которое при указании Global будет перезаписано после исполнения функции printer2
def printer2():
    global x # = позволяет перезаписать глобальное значение переменной после использования функции, в которой находится
    x = 'Ближайшее локальное значение' # - может быть использовано как глобальное при экранировании последующего значения x
    print (x)
    x = 'Локальное значение' # - значение, которое будет замещать собой глобальное значение по праву последнего в очереди функции
    print (x)
    return x
printer2()
print (x) 
# Использовать такой способ замещения глобального значения не стоит без полной уверенности, так как подобная функция может заменить важные переменные
# Для большей уверенности лучше использовать операцию:
x = printer2() # - Но для назначения переменной требуется указать return в указываемой функции, чтобы это значение можно было передать
print (x)
